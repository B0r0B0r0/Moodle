#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Proiect
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="PBD")]
	public partial class dbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertEnrollment(Enrollment instance);
    partial void UpdateEnrollment(Enrollment instance);
    partial void DeleteEnrollment(Enrollment instance);
    partial void InsertSubject(Subject instance);
    partial void UpdateSubject(Subject instance);
    partial void DeleteSubject(Subject instance);
    partial void InsertRequest(Request instance);
    partial void UpdateRequest(Request instance);
    partial void DeleteRequest(Request instance);
    partial void InsertUsersSubject(UsersSubject instance);
    partial void UpdateUsersSubject(UsersSubject instance);
    partial void DeleteUsersSubject(UsersSubject instance);
    partial void InsertCourse(Course instance);
    partial void UpdateCourse(Course instance);
    partial void DeleteCourse(Course instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public dbDataContext() : 
				base(global::Proiect.Properties.Settings.Default.PBDConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Enrollment> Enrollments
		{
			get
			{
				return this.GetTable<Enrollment>();
			}
		}
		
		public System.Data.Linq.Table<Subject> Subjects
		{
			get
			{
				return this.GetTable<Subject>();
			}
		}
		
		public System.Data.Linq.Table<Request> Requests
		{
			get
			{
				return this.GetTable<Request>();
			}
		}
		
		public System.Data.Linq.Table<UsersSubject> UsersSubjects
		{
			get
			{
				return this.GetTable<UsersSubject>();
			}
		}
		
		public System.Data.Linq.Table<Course> Courses
		{
			get
			{
				return this.GetTable<Course>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Enrollments")]
	public partial class Enrollment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _iduser;
		
		private System.Nullable<int> _idcourse;
		
		private EntityRef<Course> _Course;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OniduserChanging(System.Nullable<int> value);
    partial void OniduserChanged();
    partial void OnidcourseChanging(System.Nullable<int> value);
    partial void OnidcourseChanged();
    #endregion
		
		public Enrollment()
		{
			this._Course = default(EntityRef<Course>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iduser", DbType="Int")]
		public System.Nullable<int> iduser
		{
			get
			{
				return this._iduser;
			}
			set
			{
				if ((this._iduser != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OniduserChanging(value);
					this.SendPropertyChanging();
					this._iduser = value;
					this.SendPropertyChanged("iduser");
					this.OniduserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idcourse", DbType="Int")]
		public System.Nullable<int> idcourse
		{
			get
			{
				return this._idcourse;
			}
			set
			{
				if ((this._idcourse != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidcourseChanging(value);
					this.SendPropertyChanging();
					this._idcourse = value;
					this.SendPropertyChanged("idcourse");
					this.OnidcourseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Enrollment", Storage="_Course", ThisKey="idcourse", OtherKey="id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.Enrollments.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.Enrollments.Add(this);
						this._idcourse = value.id;
					}
					else
					{
						this._idcourse = default(Nullable<int>);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Enrollment", Storage="_User", ThisKey="iduser", OtherKey="id", IsForeignKey=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Enrollments.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Enrollments.Add(this);
						this._iduser = value.id;
					}
					else
					{
						this._iduser = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Subjects")]
	public partial class Subject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _subjectname;
		
		private EntitySet<UsersSubject> _UsersSubjects;
		
		private EntitySet<Course> _Courses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnsubjectnameChanging(string value);
    partial void OnsubjectnameChanged();
    #endregion
		
		public Subject()
		{
			this._UsersSubjects = new EntitySet<UsersSubject>(new Action<UsersSubject>(this.attach_UsersSubjects), new Action<UsersSubject>(this.detach_UsersSubjects));
			this._Courses = new EntitySet<Course>(new Action<Course>(this.attach_Courses), new Action<Course>(this.detach_Courses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subjectname", DbType="VarChar(50)")]
		public string subjectname
		{
			get
			{
				return this._subjectname;
			}
			set
			{
				if ((this._subjectname != value))
				{
					this.OnsubjectnameChanging(value);
					this.SendPropertyChanging();
					this._subjectname = value;
					this.SendPropertyChanged("subjectname");
					this.OnsubjectnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_UsersSubject", Storage="_UsersSubjects", ThisKey="id", OtherKey="idsubject")]
		public EntitySet<UsersSubject> UsersSubjects
		{
			get
			{
				return this._UsersSubjects;
			}
			set
			{
				this._UsersSubjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Course", Storage="_Courses", ThisKey="id", OtherKey="idSubject")]
		public EntitySet<Course> Courses
		{
			get
			{
				return this._Courses;
			}
			set
			{
				this._Courses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UsersSubjects(UsersSubject entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_UsersSubjects(UsersSubject entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Requests")]
	public partial class Request : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _iduser;
		
		private string _request1;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OniduserChanging(System.Nullable<int> value);
    partial void OniduserChanged();
    partial void Onrequest1Changing(string value);
    partial void Onrequest1Changed();
    #endregion
		
		public Request()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iduser", DbType="Int")]
		public System.Nullable<int> iduser
		{
			get
			{
				return this._iduser;
			}
			set
			{
				if ((this._iduser != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OniduserChanging(value);
					this.SendPropertyChanging();
					this._iduser = value;
					this.SendPropertyChanged("iduser");
					this.OniduserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="request", Storage="_request1", DbType="VarChar(100)")]
		public string request1
		{
			get
			{
				return this._request1;
			}
			set
			{
				if ((this._request1 != value))
				{
					this.Onrequest1Changing(value);
					this.SendPropertyChanging();
					this._request1 = value;
					this.SendPropertyChanged("request1");
					this.Onrequest1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Request", Storage="_User", ThisKey="iduser", OtherKey="id", IsForeignKey=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Requests.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Requests.Add(this);
						this._iduser = value.id;
					}
					else
					{
						this._iduser = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UsersSubjects")]
	public partial class UsersSubject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _iduser;
		
		private System.Nullable<int> _idsubject;
		
		private EntityRef<Subject> _Subject;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OniduserChanging(System.Nullable<int> value);
    partial void OniduserChanged();
    partial void OnidsubjectChanging(System.Nullable<int> value);
    partial void OnidsubjectChanged();
    #endregion
		
		public UsersSubject()
		{
			this._Subject = default(EntityRef<Subject>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iduser", DbType="Int")]
		public System.Nullable<int> iduser
		{
			get
			{
				return this._iduser;
			}
			set
			{
				if ((this._iduser != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OniduserChanging(value);
					this.SendPropertyChanging();
					this._iduser = value;
					this.SendPropertyChanged("iduser");
					this.OniduserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idsubject", DbType="Int")]
		public System.Nullable<int> idsubject
		{
			get
			{
				return this._idsubject;
			}
			set
			{
				if ((this._idsubject != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidsubjectChanging(value);
					this.SendPropertyChanging();
					this._idsubject = value;
					this.SendPropertyChanged("idsubject");
					this.OnidsubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_UsersSubject", Storage="_Subject", ThisKey="idsubject", OtherKey="id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.UsersSubjects.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.UsersSubjects.Add(this);
						this._idsubject = value.id;
					}
					else
					{
						this._idsubject = default(Nullable<int>);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UsersSubject", Storage="_User", ThisKey="iduser", OtherKey="id", IsForeignKey=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UsersSubjects.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UsersSubjects.Add(this);
						this._iduser = value.id;
					}
					else
					{
						this._iduser = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Courses")]
	public partial class Course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _coursename;
		
		private string _courseprof;
		
		private string _coursepath;
		
		private System.Nullable<int> _idSubject;
		
		private string _coursetype;
		
		private EntitySet<Enrollment> _Enrollments;
		
		private EntityRef<Subject> _Subject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OncoursenameChanging(string value);
    partial void OncoursenameChanged();
    partial void OncourseprofChanging(string value);
    partial void OncourseprofChanged();
    partial void OncoursepathChanging(string value);
    partial void OncoursepathChanged();
    partial void OnidSubjectChanging(System.Nullable<int> value);
    partial void OnidSubjectChanged();
    partial void OncoursetypeChanging(string value);
    partial void OncoursetypeChanged();
    #endregion
		
		public Course()
		{
			this._Enrollments = new EntitySet<Enrollment>(new Action<Enrollment>(this.attach_Enrollments), new Action<Enrollment>(this.detach_Enrollments));
			this._Subject = default(EntityRef<Subject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_coursename", DbType="VarChar(50)")]
		public string coursename
		{
			get
			{
				return this._coursename;
			}
			set
			{
				if ((this._coursename != value))
				{
					this.OncoursenameChanging(value);
					this.SendPropertyChanging();
					this._coursename = value;
					this.SendPropertyChanged("coursename");
					this.OncoursenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_courseprof", DbType="VarChar(50)")]
		public string courseprof
		{
			get
			{
				return this._courseprof;
			}
			set
			{
				if ((this._courseprof != value))
				{
					this.OncourseprofChanging(value);
					this.SendPropertyChanging();
					this._courseprof = value;
					this.SendPropertyChanged("courseprof");
					this.OncourseprofChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_coursepath", DbType="VarChar(50)")]
		public string coursepath
		{
			get
			{
				return this._coursepath;
			}
			set
			{
				if ((this._coursepath != value))
				{
					this.OncoursepathChanging(value);
					this.SendPropertyChanging();
					this._coursepath = value;
					this.SendPropertyChanged("coursepath");
					this.OncoursepathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idSubject", DbType="Int")]
		public System.Nullable<int> idSubject
		{
			get
			{
				return this._idSubject;
			}
			set
			{
				if ((this._idSubject != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidSubjectChanging(value);
					this.SendPropertyChanging();
					this._idSubject = value;
					this.SendPropertyChanged("idSubject");
					this.OnidSubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_coursetype", DbType="NChar(50)")]
		public string coursetype
		{
			get
			{
				return this._coursetype;
			}
			set
			{
				if ((this._coursetype != value))
				{
					this.OncoursetypeChanging(value);
					this.SendPropertyChanging();
					this._coursetype = value;
					this.SendPropertyChanged("coursetype");
					this.OncoursetypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Enrollment", Storage="_Enrollments", ThisKey="id", OtherKey="idcourse")]
		public EntitySet<Enrollment> Enrollments
		{
			get
			{
				return this._Enrollments;
			}
			set
			{
				this._Enrollments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Course", Storage="_Subject", ThisKey="idSubject", OtherKey="id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.Courses.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.Courses.Add(this);
						this._idSubject = value.id;
					}
					else
					{
						this._idSubject = default(Nullable<int>);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Enrollments(Enrollment entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_Enrollments(Enrollment entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _username;
		
		private string _usertype;
		
		private string _userpass;
		
		private string _useremail;
		
		private EntitySet<Enrollment> _Enrollments;
		
		private EntitySet<Request> _Requests;
		
		private EntitySet<UsersSubject> _UsersSubjects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnusertypeChanging(string value);
    partial void OnusertypeChanged();
    partial void OnuserpassChanging(string value);
    partial void OnuserpassChanged();
    partial void OnuseremailChanging(string value);
    partial void OnuseremailChanged();
    #endregion
		
		public User()
		{
			this._Enrollments = new EntitySet<Enrollment>(new Action<Enrollment>(this.attach_Enrollments), new Action<Enrollment>(this.detach_Enrollments));
			this._Requests = new EntitySet<Request>(new Action<Request>(this.attach_Requests), new Action<Request>(this.detach_Requests));
			this._UsersSubjects = new EntitySet<UsersSubject>(new Action<UsersSubject>(this.attach_UsersSubjects), new Action<UsersSubject>(this.detach_UsersSubjects));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(50)")]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_usertype", DbType="VarChar(50)")]
		public string usertype
		{
			get
			{
				return this._usertype;
			}
			set
			{
				if ((this._usertype != value))
				{
					this.OnusertypeChanging(value);
					this.SendPropertyChanging();
					this._usertype = value;
					this.SendPropertyChanged("usertype");
					this.OnusertypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userpass", DbType="VarChar(100)")]
		public string userpass
		{
			get
			{
				return this._userpass;
			}
			set
			{
				if ((this._userpass != value))
				{
					this.OnuserpassChanging(value);
					this.SendPropertyChanging();
					this._userpass = value;
					this.SendPropertyChanged("userpass");
					this.OnuserpassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_useremail", DbType="VarChar(50)")]
		public string useremail
		{
			get
			{
				return this._useremail;
			}
			set
			{
				if ((this._useremail != value))
				{
					this.OnuseremailChanging(value);
					this.SendPropertyChanging();
					this._useremail = value;
					this.SendPropertyChanged("useremail");
					this.OnuseremailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Enrollment", Storage="_Enrollments", ThisKey="id", OtherKey="iduser")]
		public EntitySet<Enrollment> Enrollments
		{
			get
			{
				return this._Enrollments;
			}
			set
			{
				this._Enrollments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Request", Storage="_Requests", ThisKey="id", OtherKey="iduser")]
		public EntitySet<Request> Requests
		{
			get
			{
				return this._Requests;
			}
			set
			{
				this._Requests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UsersSubject", Storage="_UsersSubjects", ThisKey="id", OtherKey="iduser")]
		public EntitySet<UsersSubject> UsersSubjects
		{
			get
			{
				return this._UsersSubjects;
			}
			set
			{
				this._UsersSubjects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Enrollments(Enrollment entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Enrollments(Enrollment entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Requests(Request entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Requests(Request entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UsersSubjects(UsersSubject entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UsersSubjects(UsersSubject entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
}
#pragma warning restore 1591
